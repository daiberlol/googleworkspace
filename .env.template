# Google OAuth2 Configuration
# Get these from Google Cloud Console (https://console.cloud.google.com/)
# 1. Create a new project or select existing one
# 2. Enable Google Calendar API
# 3. Go to Credentials > Create Credentials > OAuth 2.0 Client IDs
# 4. Choose "Web application" as application type
GOOGLE_CLIENT_ID=your_google_client_id_here
GOOGLE_CLIENT_SECRET=your_google_client_secret_here
GOOGLE_REDIRECT_URI=http://localhost:3000/auth/google/callback

# Application Configuration
NODE_ENV=development
PORT=3000

# Database Configuration (uncomment if you add database support)
# DATABASE_URL=postgresql://username:password@localhost:5432/database_name
# DATABASE_URL=mongodb://localhost:27017/database_name

# Session/JWT Configuration (uncomment if implementing authentication sessions)
# Generate a secure random string for JWT_SECRET (e.g., using openssl rand -base64 32)
# JWT_SECRET=your_jwt_secret_here
# SESSION_SECRET=your_session_secret_here

# Google API Configuration (uncomment if needed for additional Google services)
# GOOGLE_API_KEY=your_google_api_key_here

# Logging Configuration
# Options: error, warn, info, debug
LOG_LEVEL=debug

# CORS Configuration
# Add your frontend URL if different from localhost
CORS_ORIGIN=http://localhost:3000

# GraphQL Configuration
# Set to false in production for security
GRAPHQL_PLAYGROUND=true
GRAPHQL_INTROSPECTION=true

# Optional: Rate Limiting (uncomment if implementing rate limiting)
# RATE_LIMIT_TTL=60
# RATE_LIMIT_LIMIT=100

# Optional: Cache Configuration (uncomment if implementing caching)
# REDIS_URL=redis://localhost:6379
# CACHE_TTL=300
